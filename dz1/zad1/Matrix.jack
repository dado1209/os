class Matrix{
    field int i,j;
    static int n,n1;
    field int n2;
    
    field Array array1;
    constructor Matrix new (int n){
        let n1=n;
        let i=0;
        let j=0;
        let array1=Array.new(n*n);

        
        while(i<n){
            while(j<n){
                let array1[n*i+j]=0;
                let j=j+1;
            }
            let i=i+1;
        }


        return this;
    }
    method void print(){
        var int i1,j1;
        let j1=0;
        let i1=0;
        let n=n1;
        while(i1<n){
            while(j1<n){
                do Output.printInt(array1[n*i1+j1]);
                do Output.printString(" ");
                let j1=j1+1;
            }
            do Output.println();
            let i1=i1+1;
            let j1=0;
        }
        do Output.println();
        return;
    }
    method int get(int i, int j){
        return array1[n1*i+j];
        
    }

    method void set(int i, int j, int x){
       let array1[i*n1+j]=x;
       return;
    }
    method int size(Matrix m){
        return n1;
    }
    method Array getArray(){
        return array1;
    }

    method Matrix add(Matrix m2){
        var Matrix m;
        var Array array2,array3;
        var int i1,j1;
        
        let j1=0;
        let i1=0;
        let array2=array1;
        let array3=m2.getArray();
        let m=Matrix.new(n1);

        while(i1<n1){
            while(j1<n1){
                do m.set(i1,j1,array2[i1*n1+j1]+array3[i1*n1+j1]);
                let j1=j1+1;
            }
            do Output.println();
            let i1=i1+1;
            let j1=0;
        }
        return m;
    }

    method Matrix multScalar(int x){
        var Matrix m;
        var Array array2,array3;
        var int i1,j1;
        
        let j1=0;
        let i1=0;
        let array2=array1;
        let m=Matrix.new(n1);

        while(i1<n1){
            while(j1<n1){
                do m.set(i1,j1,array2[i1*n1+j1]*x);
                let j1=j1+1;
            }
            do Output.println();
            let i1=i1+1;
            let j1=0;
        }
        return m;
    }

    method Matrix multMat(Matrix m2){
        var Matrix m;
        var Array array2,array3;
        var int i1,j1,sum,k1;
        
        let j1=0;
        let i1=0;
        let k1=0;
        let array2=array1;
        let array3=m2.getArray();
        let m=Matrix.new(n1);

        while(i1<n1){
            while(j1<n1){
                do Output.println();
                let sum=0;
                while(k1<n1){
                    let sum=sum+(array2[i1*n1+k1]*array3[k1*n1+j1]);
                    let k1=k1+1;
                }
                do m.set(i1,j1,sum);
                
                let k1=0;
                let j1=j1+1;
            }
            do Output.println();
            let i1=i1+1;
            let j1=0;
        }
        return m;
    }
    
    method int norm(Matrix m){
        var Array array2,array3;
        var int i1,j1,res;
        let res=0;
        let j1=0;
        let i1=0;
        let array2=array1;
        while(i1<n1){
            while(j1<n1){
                let res=res+(array2[i1*n1+j1]*array2[i1*n1+j1]);
                let j1=j1+1;
            }
            let i1=i1+1;
            let j1=0;
        }
        return Math.sqrt(res);
    }
    
    function Matrix eye(int n){
		var Matrix m;
		var int i;
		let m=Matrix.new(n);
		let i=0;
		while(i<n){
			do m.set(i,i,1);
			let i=i+1;
		}
		return m;
	}
}